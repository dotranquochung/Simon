Library IEEE;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.std_logic_arith.all;
use ieee.numeric_std.all;

entity output_Register is
	port(	section:									in std_logic_vector(1 downto 0);
			pb0, pb1, pb2, pb3:					in std_logic; --Push buttons
			game_clk, compare, user_input:	in std_logic; --Clock setting output/comparison signal/user inputting signal
			pass_Fail:								out std_logic;
			rnd_won, rnd_complete:				out std_logic);
end output_Register;

architecture behavior of output_Register is

	signal shift_reg_MSB: 	std_logic_vector(11 downto 0); --Stored Random Pattern
	signal shift_reg_LSB: 	std_logic_vector(11 downto 0);
	
	signal user_input_MSB: 	std_logic_vector(11 downto 0); --Stored User Pattern
	signal user_input_LSB: 	std_logic_vector(11 downto 0);
	
	signal round_complete: 	std_logic;
	signal round_won: 		std_logic;
	
	signal comp_pos: 			integer range -1 to 11;
	signal input_pos: 		integer range -1 to 11;
	
begin
	process (section) --Commits random code to memory
	begin
	
		if game_clk = '1' AND compare = '0' AND user_input = '0' then
			shift_reg_MSB(11) <= section(1);
			shift_reg_LSB(11) <= section(0);
			
			shift_reg_MSB(10) <= shift_reg_MSB(11);
			shift_reg_MSB(9)	<= shift_reg_MSB(10);
			shift_reg_MSB(8)	<= shift_reg_MSB(9);
			shift_reg_MSB(7)	<= shift_reg_MSB(8);
			shift_reg_MSB(6)	<= shift_reg_MSB(7);
			shift_reg_MSB(5)	<= shift_reg_MSB(6);
			shift_reg_MSB(4)	<= shift_reg_MSB(5);
			shift_reg_MSB(3)	<= shift_reg_MSB(4);
			shift_reg_MSB(2)	<= shift_reg_MSB(3);
			shift_reg_MSB(1)	<= shift_reg_MSB(2);
			shift_reg_MSB(0)	<= shift_reg_MSB(1);
			
			shift_reg_LSB(10)	<= shift_reg_LSB(11);
			shift_reg_LSB(9)	<= shift_reg_LSB(10);
			shift_reg_LSB(8)	<= shift_reg_LSB(9);
			shift_reg_LSB(7)	<= shift_reg_LSB(8);
			shift_reg_LSB(6)	<= shift_reg_LSB(7);
			shift_reg_LSB(5)	<= shift_reg_LSB(6);
			shift_reg_LSB(4)	<= shift_reg_LSB(5);
			shift_reg_LSB(3)	<= shift_reg_LSB(4);
			shift_reg_LSB(2)	<= shift_reg_LSB(3);
			shift_reg_LSB(1)	<= shift_reg_LSB(2);
			shift_reg_LSB(0)	<= shift_reg_LSB(1);
		end if;
	end process;
	
	process (user_input)	--Commits user input to memory
	begin
		round_complete <= '0';
		comp_pos <= 11;
		input_pos <= 11;
	
		if user_input = '1' AND (pb0 = '1' OR pb1 = '1' OR pb2 = '1' OR pb3 = '1') then
			if pb0 = '1' then
				user_input_MSB(11) <= '0';
				user_input_LSB(11) <= '0';
			end if;
			if pb1 = '1' then
				user_input_MSB(11) <= '0';
				user_input_LSB(11) <= '1';
			end if;
			if pb2 = '1' then
				user_input_MSB(11) <= '1';
				user_input_LSB(11) <= '0';
			end if;
			if pb3 = '1' then
				user_input_MSB(11) <= '1';
				user_input_LSB(11) <= '1';
			end if;
			
			user_input_MSB(10)	<= user_input_MSB(11);
			user_input_MSB(9) 	<= user_input_MSB(10);
			user_input_MSB(8) 	<= user_input_MSB(9);
			user_input_MSB(7) 	<= user_input_MSB(8);
			user_input_MSB(6) 	<= user_input_MSB(7);
			user_input_MSB(5) 	<= user_input_MSB(6);
			user_input_MSB(4) 	<= user_input_MSB(5);
			user_input_MSB(3) 	<= user_input_MSB(4);
			user_input_MSB(2) 	<= user_input_MSB(3);
			user_input_MSB(1) 	<= user_input_MSB(2);
			user_input_MSB(0) 	<= user_input_MSB(1);
			
			user_input_LSB(10)	<= user_input_LSB(11);
			user_input_LSB(9) 	<= user_input_LSB(10);
			user_input_LSB(8) 	<= user_input_LSB(9);
			user_input_LSB(7) 	<= user_input_LSB(8);
			user_input_LSB(6) 	<= user_input_LSB(7);
			user_input_LSB(5) 	<= user_input_LSB(6);
			user_input_LSB(4) 	<= user_input_LSB(5);
			user_input_LSB(3) 	<= user_input_LSB(4);
			user_input_LSB(2) 	<= user_input_LSB(3);
			user_input_LSB(1) 	<= user_input_LSB(2);
			user_input_LSB(0) 	<= user_input_LSB(1);
			
			input_pos <= input_pos - 1;
			
			if input_pos < 0 then
			 compare <= '1'; --compare should be a signal
			end if;
			
		end if;
		
		if compare = '1' AND round_complete = '0' then
		
			if game_clk = '1' then
		
				if (user_input_MSB(comp_pos) = shift_reg_MSB(comp_pos)) AND (user_input_LSB(comp_pos) = shift_reg_LSB(comp_pos)) then
					
					comp_pos <= comp_pos - 1;
				
					if comp_pos < 0 then
						
						comp_pos <= 11;
						round_complete <= '1';
						round_won <= '1';
					end if;
				else
					round_won <= '0';
					round_complete <= '1';
				end if;
				
			rnd_won 			<= round_won;
			rnd_complete 	<= round_complete;
			
			end if;
		end if;
	end process;
end behavior;
